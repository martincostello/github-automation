name: dotnet-upgrade-report

on:
  schedule:
    - cron: '30 08 * * *'
  workflow_dispatch:
    inputs:
      branch:
        description: "The branch to run the report for."
        required: false
        type: choice
        options:
          - "dotnet-vnext"
          - "dotnet-nightly"
        default: "dotnet-vnext"

permissions: {}

jobs:
  generate:
    runs-on: ubuntu-latest
    concurrency:
      group: "${{ github.workflow }}-${{ inputs.branch }}"
      cancel-in-progress: false
    steps:
      - name: Generate report
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          GIST_ID: "2083bcc83f30a5038175e4f31e0fc59f"
        run: |
          $ErrorActionPreference = "Stop"
          $ProgressPreference = "SilentlyContinue"

          $branch = "${{ inputs.branch }}"
          $defaultBranch = "dotnet-vnext"

          if ([string]::IsNullOrEmpty($branch)) {
            $branch = $defaultBranch
          }

          $checksOfInterest = @(
            "code-ql",
            "code-ql (csharp)",
            "code-ql (javascript)",
            "dependency-review",
            "lighthouse",
            "macos-latest",
            "ubuntu-latest",
            "validate-packages",
            "windows-latest"
          )

          $contents = gh api "repos/${{ github.repository }}/contents/.github/workflow-config.json?ref=${{ github.sha }}" | ConvertFrom-Json
          $repos = ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($contents.content)) | ConvertFrom-Json).repositories

          function Format-Slug() {
            param(
              [Parameter(Mandatory = $true)]
              [string]$Value
            )
            return $Value.Replace("-", "--").Replace("_", "__").Replace(" ", "_")
          }

          function Get-Badge() {
            param(
              [Parameter(Mandatory = $true)]
              [string]$Label,

              [Parameter(Mandatory = $true)]
              [string]$Message,

              [Parameter(Mandatory = $true)]
              [string]$Color,

              [Parameter(Mandatory = $true)]
              [string]$Logo
            )

            $Label = Format-Slug -Value $Label
            $Message = Format-Slug -Value $Message

            return "https://img.shields.io/badge/${Label}-${Message}-${Color}?logo=${Logo}"
          }

          if ($branch -eq $defaultBranch) {
            $releases = (Invoke-WebRequest https://raw.githubusercontent.com/dotnet/core/main/release-notes/releases-index.json).Content | ConvertFrom-Json
            $latestVersion = $releases."releases-index"[0]."latest-sdk"
          } else {
            $channel = "8.0.1xx-preview7"
            $quality = "daily"
            $versionContent = (Invoke-WebRequest "https://aka.ms/dotnet/${channel}/${quality}/sdk-productVersion.txt").Content
            $latestVersion = [System.Text.Encoding]::ASCII.GetString($versionContent).Trim()
          }

          $report = @(
            "# .NET vNext Upgrade Report",
            "",
            "| Pull Request | SDK Version | Build Status | Conflicts? |"
            "| :----------- | :---------- | :----------- | :--------: |"
          )

          foreach ($repo in $repos) {
            $head = gh api "repos/${repo}/commits/${branch}" --jq '.sha' 2> $null

            if ($LASTEXITCODE -ne 0) {
              Write-Output "::debug::The ${branch} branch of ${repo} does not exist or does not have an open pull request."
              continue
            }

            if ($branch -eq $defaultBranch) {
              $base = gh api "repos/${repo}" --jq '.default_branch'
            } else {
              $base = "dotnet-vnext"
            }

            $env:base_branch = $base
            $branchPR = gh api "repos/${repo}/commits/${head}/pulls" --jq '.[] | select(.base.ref == env.base_branch) | .number'
            $pr = gh api "repos/${repo}/pulls/${branchPR}" --jq '{ number: .number, url: .html_url, mergeable_state: .mergeable_state }' | ConvertFrom-Json

            $checkStatuses = `
              gh api "repos/${repo}/commits/$head/check-runs" --jq '.check_runs[] | { name: .name, conclusion: .conclusion }' `
              | ConvertFrom-Json `
              | Where-Object -Property name -In -Value $checksOfInterest `
              | Select-Object -ExpandProperty conclusion

            $status = "success"

            foreach ($status in $checkStatuses) {
              if ($status -eq "failure") {
                $status = "failure"
                break
              }
              elseif ($status -eq "neutral") {
                $status = "pending"
              }
            }

            $globalJsonContent = gh api "repos/${repo}/contents/global.json?ref=${branch}" --jq '.content'
            $globalJson = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($globalJsonContent))
            $sdkVersion = $globalJson | ConvertFrom-Json | Select-Object -ExpandProperty sdk | Select-Object -ExpandProperty version

            $lineNumber = -1
            $globalJsonLines = $globalJson -split "`n"
            for ($i = 0; $i -lt $globalJsonLines.Length; $i++) {
              $line = $globalJsonLines[$i]
              if ($line.Contains($sdkVersion)) {
                $lineNumber = $i + 1
                break
              }
            }

            $buildColor = $status -eq "success" ? "brightgreen" : $status -eq "pending" ? "yellow" : "red"
            $buildBadge = Get-Badge -Label "build" -Message $status -Color $buildColor -Logo "github"
            $buildUrl = "$($pr.url)"

            $purple = "512BD4"
            $sdkColor = $sdkVersion -eq $latestVersion ? $purple : "yellow"
            $sdkBadge = Get-Badge -Label "SDK" -Message $sdkVersion -Color $sdkColor -Logo "dotnet"
            $sdkUrl = "$($env:GITHUB_SERVER_URL)/${repo}/blob/${branch}/global.json#L${lineNumber}"

            $hasConflicts = $pr.mergeable_state -eq "dirty"
            $conflictsColor = $hasConflicts ? "red" : "brightgreen"
            $conflictsBadge = Get-Badge -Label "Conflicts" -Message ($hasConflicts ? "Yes" : "No") -Color $conflictsColor -Logo "git"
            $conflictsUrl = "$($pr.url)"

            $report += "| [${repo}#$($pr.number)]($($pr.url)) | [![.NET SDK version](${sdkBadge})](${sdkUrl}) | [![Build: ${status}](${buildBadge})](${buildUrl}) | [![Merge conflicts?](${conflictsBadge})](${conflictsUrl}) |"
          }

          $report += ""
          $report += "Generated by [GitHub Actions](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"

          $report >> $env:GITHUB_STEP_SUMMARY

          if ($branch -eq $defaultBranch) {
            $headers = @{
              "Accept" = "application/vnd.github+json";
              "Authorization" = "Bearer $($env:GH_TOKEN)";
              "X-GitHub-Api-Version" = "2022-11-28";
            }
            $gist = @{
              files = @{
                "summary.md" = @{
                  content = $report -join "`n"
                }
              }
            } | ConvertTo-Json -Depth 5

            Invoke-WebRequest -Method Patch -Headers $headers -Uri "$($env:GITHUB_API_URL)/gists/$($env:GIST_ID)" -Body $gist | Out-Null

            Write-Output "::notice::https://gist.github.com/${{ github.repository_owner }}/$($env:GIST_ID)"
          }

          return 0
