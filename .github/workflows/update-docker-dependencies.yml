name: update-docker-dependencies

on:
  schedule:
    - cron: '0 5 * * MON'
  workflow_dispatch:

env:
  FORCE_COLOR: 3
  TERM: xterm

permissions: {}

jobs:
  get-repos:
    runs-on: [ ubuntu-latest ]
    if: github.event.repository.fork == false

    outputs:
      repos: ${{ steps.get-repos.outputs.result }}

    steps:

      - name: Get repositories
        id: get-repos
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.COSTELLOBOT_TOKEN }}
          result-encoding: string
          script: |
            const query = `
              {
                viewer {
                  repositories(
                    affiliations: [COLLABORATOR],
                    ownerAffiliations: [COLLABORATOR],
                    orderBy: { field:NAME, direction:ASC },
                    first: 100) {
                    nodes {
                      name,
                      isArchived,
                      isFork,
                      owner {
                        login
                      }
                    }
                  }
                }
              }
            `;

            const repos = await github.graphql(query, {});

            let repoNames = repos.viewer.repositories.nodes
              .filter((p) => !p.isArchived)
              .filter((p) => !p.isFork)
              .filter((p) => p.owner.login === process.env.GITHUB_REPOSITORY_OWNER)
              .map((p) => p.name);

            // TODO Remove once tested
            repoNames = ['github-automation'];

            return JSON.stringify(repoNames);

  update-docker-dependencies:
    name: 'update-docker-dependencies-${{ matrix.repo }}'
    needs: [ get-repos ]
    runs-on: [ ubuntu-latest ]

    concurrency:
      group: 'update-docker-dependencies-${{ matrix.repo }}'
      cancel-in-progress: false

    env:
      REGCLIENT_VERSION: 0.8.2

    strategy:
      fail-fast: false
      max-parallel: 5
      matrix:
        repo: ${{ fromJSON(needs.get-repos.outputs.repos) }}

    steps:

    - name: Install regctl
      run: |
        sudo curl -sL "https://github.com/regclient/regclient/releases/download/v${REGCLIENT_VERSION}/regctl-linux-amd64" --output /usr/local/bin/regctl
        sudo chmod +x /usr/local/bin/regctl
        regctl version

    - name: Get default branch
      id: get-default-branch
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      env:
        REPO_OWNER: ${{ github.repository_owner }}
        REPO_NAME: ${{ matrix.repo }}
      with:
        github-token: ${{ secrets.COSTELLOBOT_TOKEN }}
        result-encoding: string
        script: |
          const { data: repo } = await github.rest.repos.get({
            owner: process.env.REPO_OWNER,
            repo: process.env.REPO_NAME
          });
          return repo.default_branch;

    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        filter: 'tree:0'
        show-progress: false
        ref: ${{ steps.get-default-branch.outputs.result }}
        repository: ${{ format('{0}/{1}', github.repository_owner, matrix.repo) }}
        submodules: 'recursive'
        token: ${{ secrets.COSTELLOBOT_TOKEN }}

    - name: Update GitHub dependencies
      id: update-dependencies
      shell: pwsh
      env:
        GH_TOKEN: ${{ secrets.COSTELLOBOT_TOKEN }}
        GIT_COMMIT_USER_EMAIL: ${{ vars.GIT_COMMIT_USER_EMAIL }}
        GIT_COMMIT_USER_NAME: ${{ vars.GIT_COMMIT_USER_NAME }}
      run: |
        $ErrorActionPreference = "Stop"
        $ProgressPreference = "SilentlyContinue"

        $dependencies = @(
          @{
            name="rhysd/actionlint";
          }
        )

        foreach ($dependency in $dependencies) {
          $dependencyName = $dependency.name
          $tags = regctl tag ls $dependencyName --exclude latest
          $latestRelease = $tags | Select-Object -Last 1
          $dependencyVersion = $latestRelease.Trim().TrimStart('v')
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Failed to get the latest image version for ${dependencyName}."
            exit $LASTEXITCODE
          }
          $dependency.version = $dependencyVersion
          $dependency.digest = regctl image digest "${dependencyName}:${dependencyVersion}"
          $dependency.repo = "https://github.com/${dependencyName}"
          $dependency.url = $latestRelease.html_url
        }

        $updates = @()

        $workflowsPath = (Join-Path -Path ${env:GITHUB_WORKSPACE} ".github" "workflows")
        $workflows = @()

        if (Test-Path $workflowsPath) {
          $workflows += Get-ChildItem -Path $workflowsPath -Filter "*.yml"
          $workflows += Get-ChildItem -Path $workflowsPath -Filter "*.yaml"
        }

        foreach ($workflow in $workflows) {
          $workflowPath = $workflow.FullName
          $workflowContent = Get-Content -Path $workflowPath -Raw

          $dirty = $false
          $previous = $workflowContent

          foreach ($dependency in $dependencies) {
            $dependencyName = $dependency.name
            $dependencyDigest = $dependency.digest
            $dependencyVersion = $dependency.version

            # regex escape the dependency name
            $escapedName = [regex]::Escape($dependencyName)

            $previous = $workflowContent
            $workflowContent = $previous -Replace "uses: docker:\/\/${escapedName}@sha256:[A-Fa-f0-9]{64} # v.+$", "uses: docker://${dependencyName}@sha256:${dependencyDigest} # v${dependencyVersion}"

            if ($previous -ne $workflowContent) {
              $updates += $dependency
              $dirty = $true
            }
          }

          if ($dirty) {
            Set-Content -Path $workflowPath -Value $workflowContent.Trim()
          }
        }

        $GitStatus = (git status --porcelain)

        if ([string]::IsNullOrEmpty($GitStatus)) {
          Write-Output "No changes to commit."
          exit 0
        }

        $BranchName = "update-docker-dependencies"

        git config user.email ${env:GIT_COMMIT_USER_EMAIL} | Out-Null
        git config user.name ${env:GIT_COMMIT_USER_NAME} | Out-Null
        git remote set-url "${env:GITHUB_SERVER_URL}/${env:GITHUB_REPOSITORY}.git" | Out-Null
        git fetch origin | Out-Null
        git rev-parse --verify --quiet "remotes/origin/${BranchName}" | Out-Null

        if ($LASTEXITCODE -eq 0) {
          Write-Output "Branch ${BranchName} already exists."
          exit 0
        }

        $PullRequestTitle = "Update workflow Docker dependencies"

        $CommitMessage = @()
        $CommitMessage += $PullRequestTitle
        $CommitMessage += ""
        $CommitMessage += ""
        $CommitMessage += "Updates Docker dependencies for the GitHub Actions workflows."
        $CommitMessage += ""
        foreach ($update in $updates) {
          $CommitMessage += "- Bumps $($update.name) to version $($update.version)."
        }

        $workflowUrl = "${env:GITHUB_SERVER_URL}/${env:GITHUB_REPOSITORY}/actions/runs/${env:GITHUB_RUN_ID}"

        $PullRequestBody = @()
        $PullRequestBody += "This pull request updates the Docker dependencies for the GitHub Actions workflows."
        $PullRequestBody += ""
        $PullRequestBody += "The following dependencies have been updated:"
        $PullRequestBody += ""
        foreach ($update in $updates) {
          $PullRequestBody += "- [$($update.name)]($($update.repo)) to version [$($update.version)]($($update.url))."
        }
        $PullRequestBody += ""
        $PullRequestBody += "This pull request was generated by [GitHub Actions]($workflowUrl)."

        $CommitMessage = $CommitMessage -Join "`n"
        $PullRequestBody = $PullRequestBody -Join "`n"

        git checkout -b $BranchName
        git add .
        git commit -m $CommitMessage
        git push -u origin $BranchName

        "branch-name=${BranchName}" >> ${env:GITHUB_OUTPUT}
        "pr-title=${PullRequestTitle}" >> ${env:GITHUB_OUTPUT}
        "updated-dependencies=true" >> ${env:GITHUB_OUTPUT}

        $EOF = (New-Guid).Guid
        "pr-body<<${EOF}" >> ${env:GITHUB_OUTPUT}
        ${PullRequestBody} >> ${env:GITHUB_OUTPUT}
        "${EOF}" >> ${env:GITHUB_OUTPUT}

    - name: Create pull request
      if: steps.update-dependencies.outputs.updated-dependencies == 'true'
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      env:
        REPO_OWNER: ${{ github.repository_owner }}
        REPO_NAME: ${{ matrix.repo }}
        BASE_BRANCH: ${{ github.event.repository.default_branch }}
        HEAD_BRANCH: ${{ steps.update-dependencies.outputs.branch-name }}
        PR_BODY: ${{ steps.update-dependencies.outputs.pr-body }}
        PR_TITLE: ${{ steps.update-dependencies.outputs.pr-title }}
      with:
        github-token: ${{ secrets.COSTELLOBOT_TOKEN }}
        script: |
          await github.rest.pulls.create({
            owner: process.env.REPO_OWNER,
            repo: process.env.REPO_NAME,
            title: process.env.PR_TITLE,
            head: process.env.HEAD_BRANCH,
            base: process.env.BASE_BRANCH,
            body: process.env.PR_BODY
          });
