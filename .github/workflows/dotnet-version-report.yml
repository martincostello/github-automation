name: dotnet-version-report

on:
  workflow_dispatch:

permissions: {}

jobs:
  generate:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}
      cancel-in-progress: false
    steps:
      - name: Generate report
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        run: |
          $ErrorActionPreference = "Stop"
          $ProgressPreference = "SilentlyContinue"

          $repos = gh api "users/${{ github.repository_owner }}/repos" --paginate --jq '.[] | select(.fork == false and .archived == false) | { name: .full_name, default_branch: .default_branch, url: .html_url }' | ConvertFrom-Json

          function Format-Slug() {
            param(
              [Parameter(Mandatory = $true)]
              [string]$Value
            )
            return $Value.Replace("-", "--").Replace("_", "__").Replace(" ", "_")
          }

          function Get-Badge() {
            param(
              [Parameter(Mandatory = $true)]
              [string]$Label,

              [Parameter(Mandatory = $true)]
              [string]$Message,

              [Parameter(Mandatory = $true)]
              [string]$Color,

              [Parameter(Mandatory = $true)]
              [string]$Logo
            )

            $Label = Format-Slug -Value $Label
            $Message = Format-Slug -Value $Message

            return "https://img.shields.io/badge/${Label}-${Message}-${Color}?logo=${Logo}"
          }

          $releases = (Invoke-WebRequest https://raw.githubusercontent.com/dotnet/core/main/release-notes/releases-index.json).Content | ConvertFrom-Json

          $report = @(
            "# .NET SDK Version Report",
            "",
            "| Repository | SDK Version |"
            "| :--------- | :---------- |"
          )

          foreach ($repository in $repos) {
            $repo = $repository.name
            $branch = $repository.default_branch
            $url = $repository.url

            $globalJsonContent = gh api "repos/${repo}/contents/global.json?ref=${branch}" --jq '.content' 2> $null

            if ($LASTEXITCODE -ne 0) {
              continue
            }

            $globalJson = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($globalJsonContent))
            $sdkVersion = $globalJson | ConvertFrom-Json | Select-Object -ExpandProperty sdk | Select-Object -ExpandProperty version

            $lineNumber = -1
            $globalJsonLines = $globalJson -split "`n"
            for ($i = 0; $i -lt $globalJsonLines.Length; $i++) {
              $line = $globalJsonLines[$i]
              if ($line.Contains($sdkVersion)) {
                $lineNumber = $i + 1
                break
              }
            }

            $parts = $sdkVersion.Split('.')
            $channel = "$($parts[0]).$($parts[1])"
            $latestVersion = ($releases."releases-index" | Where-Object -Property "channel-version" -eq $channel)."latest-sdk"

            $sdkColor = $sdkVersion -eq $latestVersion ? "512BD4" : "yellow"
            $sdkBadge = Get-Badge -Label "SDK" -Message $sdkVersion -Color $sdkColor -Logo "dotnet"
            $sdkUrl = "$($env:GITHUB_SERVER_URL)/${repo}/blob/${branch}/global.json#L${lineNumber}"

            $report += "| [${repo}](${url}) | [![.NET SDK version](${sdkBadge})](${sdkUrl}) |"
          }

          $report >> $env:GITHUB_STEP_SUMMARY
          return 0
