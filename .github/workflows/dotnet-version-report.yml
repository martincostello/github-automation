name: dotnet-version-report

on:
  workflow_dispatch:

permissions: {}

jobs:
  generate:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}
      cancel-in-progress: false
    steps:
      - name: Generate report
        uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410 # v6.4.1
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}
          script: |
            let { data: repos } = await github.rest.repos.listForUser({
              username: '${{ github.repository_owner }}',
              per_page: 100,
              type: 'owner',
            });

            console.log(`Found ${repos.length} repositories.`);

            repos = repos.filter((repo) => !repo.fork && !repo.archived);

            console.log(`Found ${repos.length} repositories after filtering.`);

            const getFileContents = async (owner, repo, path, ref) => {
              const { data: contents } = await github.rest.repos.getContent({
                owner,
                repo,
                path,
                ref,
              });
              if (contents.encoding === 'base64') {
                return Buffer.from(contents.content, 'base64').toString();
              } else if (contents.encoding === 'none') {
                const response = await fetch(contents.download_url);
                return await response.text();
              } else {
                throw new Error(`Unexpected encoding for ${path}: ${contents.encoding}`);
              }
            };

            function formatSlug(value) {
              return value.replace('-', '--').replace('_', '__').replace(' ', '_');
            }

            function getBadge(label, message, color, logo) {
              label = formatSlug(label);
              message = formatSlug(message);
              return `https://img.shields.io/badge/${label}-${message}-${color}?logo=${logo}`;
            }

            const releases = JSON.parse(await getFileContents(
              'dotnet',
              'core',
              'release-notes/releases-index.json',
              'main',
            ));

            const report = [
              '# .NET SDK Version Report',
              '',
              '| Repository | SDK Version |',
              '| :--------- | :---------- |',
            ];

            for (let repository of repos) {
              const owner = repository.owner;
              const repo = repository.repo;
              const branch = repository.default_branch;

              let globalJsonString;

              try {
                globalJsonString = await getFileContents(
                  owner,
                  repo,
                  'global.json',
                  branch,
                );
              } catch (err) {
                continue;
              }

              const globalJson = JSON.parse(globalJsonString);
              const sdkVersion = globalJson.sdk.version;

              let lineNumber = -1;
              const globalJsonLines = globalJsonString.split('\n');
              for (let i = 0; i < globalJsonLines.length; i++) {
                const line = globalJsonLines[i];
                if (line.includes(sdkVersion)) {
                  lineNumber = i + 1;
                  break;
                }
              }

              const parts = sdkVersion.split('.');
              const channel = `${parts[0]}.${parts[1]}`;

              const [latestVersion] = releases['releases-index']
                .filter((p) => p['channel-version'] === channel)
                .reduce((p) => p['latest-sdk']);

              if (!latestVersion) {
                continue;
              }

              const purple = '512BD4';
              const sdkColor = sdkVersion === latestVersion ? purple : 'yellow';
              const sdkBadge = getBadge('SDK', sdkVersion, sdkColor, 'dotnet');
              const sdkUrl = `${{ github.server_url }}/${repo.full_name}/blob/${branch}/global.json#L${lineNumber}`;

              report.push(
                `| [${repository.full_name}](${repository.html_url}) | [![.NET SDK version](${sdkBadge})](${sdkUrl}) |`
              );
            }

            await core.summary.addRaw(report.join('\n')).write();
