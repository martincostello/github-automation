name: dotnet-bumper

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'The branch to upgrade the version of .NET in.'
        required: false
        type: choice
        options:
          - 'main'
        default: 'main'
      repository:
        description: 'An optional single repository to upgrade.'
        required: false
        type: string
        default: ''
      upgrade-type:
        description: 'The type of .NET upgrade to perform.'
        required: false
        type: choice
        options:
          - 'LTS'
          - 'Latest'
          - 'Preview'
        default: 'LTS'
      dry-run:
        description: 'If true, the workflow will not push any changes to GitHub.'
        required: false
        type: boolean
        default: false

env:
  DOTNET_BUMPER_UPGRADE_TYPE: ${{ inputs.upgrade-type || 'LTS' }}

permissions: {}

jobs:
  get-repos:
    runs-on: [ ubuntu-latest ]

    concurrency:
      group: ${{ github.workflow }}
      cancel-in-progress: false

    outputs:
      repositories: ${{ steps.get-repos.outputs.repositories }}

    steps:

      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Get repositories to upgrade
        uses: ./actions/get-dotnet-repos
        id: get-repos
        with:
          branch: ${{ inputs.branch || '' }}
          github-token: ${{ secrets.COSTELLOBOT_TOKEN }}
          repository: ${{ inputs.repository || '' }}

  upgrade-dotnet:
    name: 'upgrade-${{ matrix.repo }}'
    needs: [ get-repos ]
    runs-on: [ ubuntu-latest ]
    if: needs.get-repos.outputs.repositories != '[]'

    concurrency:
      group: 'upgrade-dotnet-${{ matrix.repo }}'
      cancel-in-progress: false

    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        include: ${{ fromJSON(needs.get-repos.outputs.repositories) }}

    steps:

      - name: Install .NET SDKs
        uses: actions/setup-dotnet@4d6c8fcf3c8f7a60068d26b594648e99df24cee3 # v4.0.0
        with:
          dotnet-version: |
            6.0.x
            7.0.x
            8.0.x
            9.0.x

      - name: Install .NET tools
        shell: pwsh
        env:
          DOTNET_BUMPER_VERSION: '0.2.1'
          DOTNET_OUTDATED_VERSION: '4.6.0'
        run: |
          dotnet tool install --global dotnet-outdated-tool --version "$env:DOTNET_OUTDATED_VERSION"
          dotnet tool install --global MartinCostello.DotNetBumper --version "$env:DOTNET_BUMPER_VERSION"

      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ matrix.ref }}
          repository: ${{ matrix.repo }}
          token: ${{ secrets.COSTELLOBOT_TOKEN }}

      - name: Setup Node
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: '20'

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@4d6c8fcf3c8f7a60068d26b594648e99df24cee3 # v4.0.0

      - name: Create .NET Bumper config file if no custom config
        id: generate-config
        shell: pwsh
        run: |
          $configFile = ""
          $hasCustomConfig = ((Test-Path -Path ".dotnet-bumper.json") -Or (Test-Path -Path ".dotnet-bumper.yml")) -Or (Test-Path -Path ".dotnet-bumper.yaml")
          if ((-Not $hasCustomConfig) -And ($env:DOTNET_BUMPER_UPGRADE_TYPE -ne "Preview")) {
            $tempFile = [System.IO.Path]::GetTempFileName()
            $config = @{
              includeNuGetPackages = @(
                'AWSSDK.'
              )
            }
            $config | ConvertTo-Json | Out-File -FilePath $tempFile | Out-Null
          }
          "dotnet-bumper-config=${configFile}" >> $env:GITHUB_OUTPUT

      - name: Run .NET Bumper
        id: upgrade-dotnet
        shell: pwsh
        env:
          NoWarn: 'CA1515' # HACK See https://github.com/dotnet/roslyn-analyzers/issues/7192
          CUSTOM_BUMPER_CONFIG: ${{ steps.generate-config.outputs.dotnet-bumper-config }}
          DOTNET_CLI_TELEMETRY_OPTOUT: true
          DOTNET_GENERATE_ASPNET_CERTIFICATE: false
          DOTNET_NOLOGO: true
          DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
          DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: 1
          FORCE_COLOR: 3
          NUGET_XMLDOC_MODE: skip
          TERM: xterm
        run: |
          $tempFile = [System.IO.Path]::GetTempFileName()
          $bumperArgs = @(
            ".",
            "--log-format",
            "Json",
            "--log-path",
            $tempFile,
            "--test",
            "--upgrade-type",
            $env:DOTNET_BUMPER_UPGRADE_TYPE
          )
          if (-Not [string]::IsNullOrEmpty($env:CUSTOM_BUMPER_CONFIG)) {
            $bumperArgs += "--configuration-file"
            $bumperArgs += $env:CUSTOM_BUMPER_CONFIG
          }
          dotnet bumper $bumperArgs
          "dotnet-bumper-log=${tempFile}" >> $env:GITHUB_OUTPUT

      - name: Push changes to GitHub
        id: push-changes
        shell: pwsh
        env:
          DRY_RUN: ${{ inputs.dry-run }}
          GIT_COMMIT_USER_EMAIL: ${{ vars.GIT_COMMIT_USER_EMAIL }}
          GIT_COMMIT_USER_NAME: ${{ vars.GIT_COMMIT_USER_NAME }}
        run: |
          $GitStatus = (git status --porcelain)

          if ([string]::IsNullOrEmpty($GitStatus)) {
            Write-Host "No changes to commit."
            exit 0
          }

          $GlobalJson = Join-Path . "global.json"
          $DotNetSdkVersion = (Get-Content $GlobalJson | Out-String | ConvertFrom-Json).sdk.version
          $DotNetVersion = $DotNetSdkVersion.Split('.')[0]

          $BranchName = $env:DOTNET_BUMPER_UPGRADE_TYPE -eq "Preview" ? "dotnet-vnext" : "dotnet-${DotNetVersion}-upgrade"

          git config user.email "${env:GIT_COMMIT_USER_EMAIL}" | Out-Null
          git config user.name "${env:GIT_COMMIT_USER_NAME}" | Out-Null
          git fetch origin --no-tags | Out-Null
          git rev-parse --verify --quiet "remotes/origin/${BranchName}" | Out-Null

          if ($LASTEXITCODE -eq 0) {
            Write-Host "Branch ${BranchName} already exists."
            exit 0
          }

          git config color.diff always
          git --no-pager diff

          git checkout -b $BranchName
          git add .
          git commit -m "Update to .NET ${DotNetVersion}`n`nUpdate to .NET ${DotNetVersion} with .NET SDK version ${DotNetSdkVersion}."

          if ($env:DRY_RUN -ne "true") {
            git push -u origin $BranchName
          }

          "branch-name=${BranchName}" >> $env:GITHUB_OUTPUT
          "dotnet-version=${DotNetVersion}" >> $env:GITHUB_OUTPUT
          "updated-dotnet=true" >> $env:GITHUB_OUTPUT

      - name: Create pull request
        id: create-pr
        if: steps.push-changes.outputs.updated-dotnet == 'true'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        env:
          DOTNET_BUMPER_LOG: ${{ steps.upgrade-dotnet.outputs.dotnet-bumper-log }}
          DOTNET_VERSION: ${{ steps.push-changes.outputs.dotnet-version }}
          DRY_RUN: ${{ inputs.dry-run }}
          BASE_BRANCH: ${{ matrix.ref }}
          HEAD_BRANCH: ${{ steps.push-changes.outputs.branch-name }}
          UPGRADE_REPO: ${{ matrix.repo }}
        with:
          github-token: ${{ secrets.COSTELLOBOT_TOKEN }}
          result-encoding: string
          script: |
            const fs = require('fs');
            const { owner: thisOwner, repo: thisRepo } = context.repo;
            const [ theirOwner, theirRepo ] = process.env.UPGRADE_REPO.split('/');

            const isPreview = process.env.DOTNET_BUMPER_UPGRADE_TYPE === 'Preview';
            const dotnetVersion = process.env.DOTNET_VERSION;
            const isDryRun = process.env.DRY_RUN === 'true';
            const bumperUrl = 'https://github.com/martincostello/dotnet-bumper';
            const workflowUrl = `${process.env.GITHUB_SERVER_URL}/${thisOwner}/${thisRepo}/actions/runs/${process.env.GITHUB_RUN_ID}`;

            let draft = isPreview;

            if (draft) {
              // Private personal repositories do not support drafts
              const { data: repository } = await github.rest.repos.get({ owner: theirOwner, repo: theirRepo });
              draft = repository.owner.type !== 'User' || repository.private === false;
            }

            const json = fs.readFileSync(process.env.DOTNET_BUMPER_LOG, 'utf8');
            const bumperLog = JSON.parse(json);

            const bodyLines = [
              '#### Summary :rocket:',
              '',
              `Update to .NET ${dotnetVersion}.`,
              '',
            ];

            if (isPreview) {
              bodyLines.push('This pull request is targeting a **preview** version of .NET.');
              bodyLines.push('');
              bodyLines.push(`These changes should not be merged before .NET ${dotnetVersion} reaches the release candidate stage.`);
              bodyLines.push('');
            }

            bodyLines.push('#### Changes :memo:');
            bodyLines.push('');

            if (bumperLog['changelog'] && bumperLog['changelog'].length > 0) {
              for (const entry of bumperLog['changelog']) {
                bodyLines.push(`- ${entry}`.trim());
              }
            } else {
              bodyLines.push(`- Update to .NET SDK \`${bumperLog.sdkVersion}\``);
            }

            bodyLines.push('');
            bodyLines.push('#### Further Reading :book:');
            bodyLines.push('');
            bodyLines.push(`- [What's new in .NET ${dotnetVersion}](https://learn.microsoft.com/dotnet/core/whats-new/dotnet-${dotnetVersion}/overview)`);
            bodyLines.push(`- [Breaking changes in .NET ${dotnetVersion}](https://learn.microsoft.com/dotnet/core/compatibility/${dotnetVersion}.0)`);
            bodyLines.push('');

            if (bumperLog['build'] && bumperLog['build']['summary']) {
              const categories = Object.entries(bumperLog['build']['summary']);
              if (categories.length > 0) {
                bodyLines.push('#### Build Summary :wrench:');
                bodyLines.push('');
                bodyLines.push('| **Type** | **ID** | **Count** |');
                bodyLines.push('|:---------|:-------|----------:|');

                for (const [type, entries] of categories) {
                  let emoji;
                  switch (type) {
                    case 'Error':
                      emoji = ':x:';
                      break;
                    case 'Warning':
                      emoji = ':warning:';
                      break;
                    default:
                      emoji = ':information_source:';
                      break;
                  }
                  for (const [id, count] of Object.entries(entries)) {
                    bodyLines.push(`| ${emoji} ${type} | ${id} | ${count} |`);
                  }
                }

                bodyLines.push('');
              }
            }

            if (bumperLog['test'] && bumperLog['test']['summary']) {
              const rows = [];
              for (const [container, entries] of Object.entries(bumperLog['test']['summary'])) {
                const passed = entries['Passed'] || 0;
                const failed = entries['Failed'] || 0;
                const skipped = entries['Skipped'] || 0;

                if (passed > 0 || failed > 0 || skipped > 0) {
                  rows.push(`| ${container} | ${passed} | ${failed} | ${skipped} |`);
                }
              }
              if (rows.length > 0) {
                bodyLines.push('#### Test Summary :test_tube:');
                bodyLines.push('');
                bodyLines.push('| **Container** | **Passed** :white_check_mark: | **Failed** :x: | **Skipped** :zzz: |');
                bodyLines.push('|:--------------|------------------------------:|---------------:|------------------:|');

                for (const row of rows) {
                  bodyLines.push(row);
                }

                bodyLines.push('');
              }
            }

            if (bumperLog['remainingReferences']) {
              const rows = [];
              for (const [relativePath, edits] of Object.entries(bumperLog['remainingReferences'])) {
                for (const edit of edits) {
                  let location = `\`${relativePath}:${edit.line}\``;

                  if (!isDryRun) {
                    const query = relativePath.endsWith('.md') ? '?plain=1' : '';
                    const linkUrl = `${process.env.GITHUB_SERVER_URL}/${theirOwner}/${theirRepo}/tree/${process.env.HEAD_BRANCH}/${relativePath}${query}#L${edit.line}`;
                    location = `[${location}](${linkUrl})`;
                  }

                  rows.push(`| ${location} | \`${edit.text}\` |`);
                }
              }
              if (rows.length > 0) {
                bodyLines.push('#### Remaining References :grey_question:');
                bodyLines.push('');
                bodyLines.push('The references below could not be updated automatically.');
                bodyLines.push('');
                bodyLines.push('Please review them in case they need to be manually updated. :detective:');
                bodyLines.push('');
                bodyLines.push('| **Location** | **Text** |');
                bodyLines.push('|:-------------|:---------|');

                for (const row of rows) {
                  bodyLines.push(row);
                }

                bodyLines.push('');
              }
            }

            if (bumperLog['warnings'] && bumperLog['warnings'].length > 0) {
              bodyLines.push('#### Warnings :warning:');
              bodyLines.push('');
              bodyLines.push('<details>');
              bodyLines.push('');
              bodyLines.push('<summary>Warnings</summary>');
              bodyLines.push('');
              bodyLines.push('```text');
              bodyLines.push(bumperLog['warnings'].join('\n'));
              bodyLines.push('```');
              bodyLines.push('');
              bodyLines.push('</details>');
              bodyLines.push('');
              bodyLines.push('');
            }

            bodyLines.push('');
            bodyLines.push(`<sub>:robot: This pull request was generated by [GitHub Actions](${workflowUrl}) using _[.NET Bumper](${bumperUrl})_.</sub>`);
            bodyLines.push('');

            const body = bodyLines.join('\n');

            if (!isDryRun) {
              const { data: pr } = await github.rest.pulls.create({
                title: `Update to .NET ${dotnetVersion}`,
                owner: theirOwner,
                repo: theirRepo,
                head: process.env.HEAD_BRANCH,
                base: process.env.BASE_BRANCH,
                draft,
                body,
              });

              core.notice(`Created pull request ${theirOwner}/${theirRepo}#${pr.number}: ${pr.html_url}`);

              try {
                await github.rest.issues.addLabels({
                  owner: theirOwner,
                  repo: theirRepo,
                  issue_number: pr.number,
                  labels: ['.NET', 'dependencies', 'enhancement'],
                });
              } catch (error) {
                // Ignore
              }
            }

            return body;

      - name: Output the report
        if: steps.create-pr.outputs.result != ''
        shell: bash
        env:
          SUMMARY: ${{ steps.create-pr.outputs.result }}
        run: echo "${SUMMARY}" >> "${GITHUB_STEP_SUMMARY}"
