name: dotnet-bumper

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'The branch to check for the presence of .NET in.'
        required: false
        type: choice
        options:
          - 'main'
        default: 'main'
      repository:
        description: 'An optional single repository to check.'
        required: false
        type: string
        default: ''
      dry-run:
        description: 'If true, the workflow will not push changes to GitHub.'
        required: false
        type: boolean
        default: false

permissions: {}

jobs:
  get-repos:
    runs-on: [ ubuntu-latest ]

    concurrency:
      group: ${{ github.workflow }}
      cancel-in-progress: false

    outputs:
      repositories: ${{ steps.get-repos.outputs.repositories }}

    steps:

      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Get repositories to upgrade
        uses: ./actions/get-dotnet-repos
        id: get-repos
        with:
          branch: ${{ inputs.branch || '' }}
          github-token: ${{ secrets.COSTELLOBOT_TOKEN }}
          repository: ${{ inputs.repository || '' }}

  upgrade-dotnet:
    name: 'upgrade-${{ matrix.repo }}'
    needs: [ get-repos ]
    runs-on: [ ubuntu-latest ]
    if: needs.get-repos.outputs.repositories != '[]'

    concurrency:
      group: 'upgrade-dotnet-${{ matrix.repo }}'
      cancel-in-progress: false

    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        include: ${{ fromJSON(needs.get-repos.outputs.repositories) }}

    steps:

      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ matrix.ref }}
          repository: ${{ matrix.repo }}
          token: ${{ secrets.COSTELLOBOT_TOKEN }}

      - name: Setup Node
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: '20'

      - name: Install .NET SDKs
        uses: actions/setup-dotnet@4d6c8fcf3c8f7a60068d26b594648e99df24cee3 # v4.0.0
        with:
          dotnet-version: |
            6.0.x
            7.0.x
            8.0.x
            9.0.x

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@4d6c8fcf3c8f7a60068d26b594648e99df24cee3 # v4.0.0

      - name: Install .NET tools
        shell: pwsh
        env:
          DOTNET_OUTDATED_VERSION: '4.6.0'
        run: |
          dotnet tool install --global dotnet-outdated-tool --version "$env:DOTNET_OUTDATED_VERSION"
          dotnet tool install --global MartinCostello.DotNetBumper --add-source https://f.feedz.io/martincostello/dotnet-bumper/nuget/index.json --prerelease

      - name: Run .NET Bumper
        id: upgrade-dotnet
        shell: pwsh
        env:
          NoWarn: 'CA1515' # HACK See https://github.com/dotnet/roslyn-analyzers/issues/7192
        run: |
          $tempFile = [System.IO.Path]::GetTempFileName()
          dotnet bumper . --log-format Json --log-path $tempFile --test --upgrade-type Preview
          "dotnet-bumper-log=${tempFile}" >> $env:GITHUB_OUTPUT

      - name: Push changes to GitHub
        id: push-changes
        shell: pwsh
        env:
          BRANCH_NAME: 'dotnet-vnext'
          DRY_RUN: ${{ inputs.dry-run }}
          GIT_COMMIT_USER_EMAIL: ${{ vars.GIT_COMMIT_USER_EMAIL }}
          GIT_COMMIT_USER_NAME: ${{ vars.GIT_COMMIT_USER_NAME }}
        run: |
          $GitStatus = (git status --porcelain)

          if ([string]::IsNullOrEmpty($GitStatus)) {
            Write-Host "No changes to commit."
            exit 0
          }

          git config color.diff always
          git --no-pager diff

          git config user.email "${env:GIT_COMMIT_USER_EMAIL}" | Out-Null
          git config user.name "${env:GIT_COMMIT_USER_NAME}" | Out-Null
          git remote set-url "${env:GITHUB_SERVER_URL}/${env:GITHUB_REPOSITORY}.git" | Out-Null
          git fetch origin | Out-Null
          git rev-parse --verify --quiet "remotes/origin/${env:BRANCH_NAME}" | Out-Null

          if ($LASTEXITCODE -eq 0) {
            Write-Host "Branch ${env:BRANCH_NAME} already exists."
            exit 0
          }

          $GlobalJson = Join-Path . "global.json"
          $DotNetSdkVersion = (Get-Content $GlobalJson | Out-String | ConvertFrom-Json).sdk.version
          $DotNetVersion = $DotNetSdkVersion.Split('.')[0]

          git checkout -b $env:BRANCH_NAME
          git add .
          git commit -m "Update to .NET ${DotNetVersion}`n`nUpdate to .NET ${DotNetVersion} with .NET SDK version ${DotNetSdkVersion}."

          if ($env:DRY_RUN -ne "true") {
            git push -u origin $env:BRANCH_NAME
          }

          "branch-name=${env:BRANCH_NAME}" >> $env:GITHUB_OUTPUT
          "dotnet-version=${DotNetVersion}" >> $env:GITHUB_OUTPUT
          "upgraded-dotnet=true" >> $env:GITHUB_OUTPUT

      - name: Create pull request
        id: create-pr
        if: steps.push-changes.outputs.upgraded-dotnet == 'true'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        env:
          DOTNET_BUMPER_LOG: ${{ steps.upgrade-dotnet.outputs.dotnet-bumper-log }}
          DOTNET_VERSION: ${{ steps.push-changes.outputs.dotnet-version }}
          DRY_RUN: ${{ inputs.dry-run }}
          BASE_BRANCH: ${{ matrix.ref }}
          HEAD_BRANCH: ${{ steps.push-changes.outputs.branch-name }}
          UPGRADE_REPO: ${{ matrix.repo }}
        with:
          github-token: ${{ secrets.COSTELLOBOT_TOKEN }}
          result-encoding: string
          script: |
            const fs = require('fs');
            const { owner: thisOwner, repo: thisRepo } = context.repo;
            const [ theirOwner, theirRepo ] = process.env.UPGRADE_REPO.split('/');

            const bumperUrl = 'https://github.com/martincostello/dotnet-bumper';
            const workflowUrl = `${process.env.GITHUB_SERVER_URL}/${thisOwner}/${thisRepo}/actions/runs/${process.env.GITHUB_RUN_ID}`;

            const { data: repository } = await github.rest.repos.get({ owner: theirOwner, repo: theirRepo });
            const draft = repository.private === false;

            const json = fs.readFileSync(process.env.DOTNET_BUMPER_LOG, 'utf8');
            const bumperLog = JSON.parse(json);

            const bodyLines = [
              '#### Summary',
              '',
              `Update to .NET ${process.env.DOTNET_VERSION}.`,
              '',
              '#### Changes',
              '',
              `- Update to .NET SDK \`${bumperLog.sdkVersion}\``,
              '',
              '#### Further Reading',
              '',
              `- [What's new in .NET ${process.env.DOTNET_VERSION}](https://learn.microsoft.com/dotnet/core/whats-new/dotnet-${process.env.DOTNET_VERSION}/overview)`,
              `- [Breaking changes in .NET ${process.env.DOTNET_VERSION}](https://learn.microsoft.com/dotnet/core/compatibility/${process.env.DOTNET_VERSION}.0)`,
            ];

            if (bumperLog['build'] && bumperLog['build']['summary']) {
              const categories = Object.entries(bumperLog['build']['summary']);
              if (categories.length > 0) {
                bodyLines.push('');
                bodyLines.push('#### Build Summary');
                bodyLines.push('');
                bodyLines.push('| **Type** | **ID** | **Count** |');
                bodyLines.push('|:---------|:-------|----------:|');

                for (const [type, entries] of categories) {
                  let emoji;
                  switch (type) {
                    case 'errors':
                      Error = ':x:';
                      break;
                    case 'Warning':
                      emoji = ':warning:';
                      break;
                    default:
                      emoji = ':information_source:';
                      break;
                  }
                  for (const [id, count] of Object.entries(entries)) {
                    bodyLines.push(`| ${emoji} ${type} | ${id} | ${count} |`);
                  }
                }
              }
            }

            if (bumperLog['test'] && bumperLog['test']['summary']) {
              const rows = [];
              for (const [container, entries] of Object.entries(bumperLog['test']['summary'])) {
                const passed = entries['Passed'] || 0;
                const failed = entries['Failed'] || 0;
                const skipped = entries['Skipped'] || 0;

                if (passed > 0 || failed > 0 || skipped > 0) {
                  rows.push(`| ${container} | ${passed} | ${failed} | ${skipped} |`);
                }
              }
              if (rows.length > 0) {
                bodyLines.push('');
                bodyLines.push('#### Test Summary');
                bodyLines.push('');
                bodyLines.push('| **Container** | **Passed** :white_check_mark: | **Failed** :x: | **Skipped** :zzz: |');
                bodyLines.push('|:--------------|------------------------------:|---------------:|------------------:|');

                for (const row of rows) {
                  bodyLines.push(row);
                }
              }
            }

            if (bumperLog['remainingReferences']) {
              const rows = [];
              for (const [relativePath, edits] of Object.entries(bumperLog['remainingReferences'])) {
                for (const edit of edits) {
                  const linkText = `${relativePath}:${edit.line}`;
                  const linkUrl = `${process.env.GITHUB_SERVER_URL}/${theirOwner}/${theirRepo}/tree/${process.env.HEAD_BRANCH}/${relativePath}#L${edit.line}`;
                  rows.push(`| [\`${linkText}\`](${linkUrl}) | \`${edit.text}\` |`);
                }
              }
              if (rows.length > 0) {
                bodyLines.push('');
                bodyLines.push('#### Remaining References');
                bodyLines.push('');
                bodyLines.push('| **Location** | **Text** |');
                bodyLines.push('|:-------------|:---------|');

                for (const row of rows) {
                  bodyLines.push(row);
                }
              }
            }

            if (bumperLog['warnings'] && bumperLog['warnings'].length > 0) {
              bodyLines.push('');
              bodyLines.push('#### Warnings');
              bodyLines.push('');
              bodyLines.push('<details>');
              bodyLines.push('');
              bodyLines.push('<summary>Warnings</summary>');
              bodyLines.push('');
              bodyLines.push('```text');
              bodyLines.push(bumperLog['warnings'].join('\n'));
              bodyLines.push('```');
              bodyLines.push('');
              bodyLines.push('</details>');
            }

            bodyLines.push('');
            bodyLines.push(`<sub>:robot: This pull request was generated by [GitHub Actions](${workflowUrl}) using [.NET Bumper](${bumperUrl}).</sub>`);
            bodyLines.push('');

            const body = bodyLines.join('\n');

            if (process.env.DRY_RUN !== 'true') {
              const { data: pr } = await github.rest.pulls.create({
                title: `Update to .NET ${process.env.DOTNET_VERSION}`,
                owner: theirOwner,
                repo: theirRepo,
                head: process.env.HEAD_BRANCH,
                base: process.env.BASE_BRANCH,
                draft,
                body,
              });

              try {
                await github.rest.issues.addLabels({
                  owner: theirOwner,
                  repo: theirRepo,
                  issue_number: pr.number,
                  labels: ['.NET', 'dependencies', 'enhancement'],
                });
              } catch (error) {
                // Ignore
              }
            }

            return body;

      - name: Output the report
        if: steps.create-pr.outputs.result != ''
        shell: bash
        env:
          SUMMARY: ${{ steps.create-pr.outputs.result }}
        run: echo "${SUMMARY}" >> "${GITHUB_STEP_SUMMARY}"
