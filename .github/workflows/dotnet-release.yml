name: dotnet-release

on:
  schedule:
    - cron: "*/15 08-22 * * MON-FRI"
  workflow_dispatch:
    inputs:
      ref:
        description: "The dotnet/core ref to check for a new release against."
        required: false
        type: string
        default: ""

permissions: {}

jobs:
  check-for-release:
    name: check-for-release

    outputs:
      dotnet-core-updated-sha: ${{ steps.check-for-release.outputs.dotnet-core-updated-sha }}
      dotnet-release-notes: ${{ steps.check-for-release.outputs.dotnet-release-notes }}
      dotnet-releases-updated: ${{ steps.check-for-release.outputs.dotnet-releases-updated }}

    runs-on: [ ubuntu-latest ]

    steps:

      - name: "Get latest dotnet/core SHA and check for release notes changes"
        uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410 # v6.4.1
        id: check-for-release
        with:
          script: |
            const owner = 'dotnet';
            const repo = 'core';

            const { data: branch } = await github.rest.repos.getBranch({
              owner,
              repo,
              branch: 'main',
            });

            const currentSha = branch.commit.sha;
            const previousSha = '${{ inputs.ref || vars.DOTNET_CORE_SHA }}';

            console.log(` Current SHA: ${currentSha}`);
            console.log(`Previous SHA: ${previousSha}`);

            let releaseNotesFiles = [];
            let updatedSha = '';

            if (currentSha !== previousSha) {
              const { data: diff } = await github.rest.repos.compareCommitsWithBasehead({
                owner,
                repo,
                basehead: `${previousSha}...${currentSha}`,
              });
              updatedSha = currentSha;
              releaseNotesFiles = diff.files
                .map(file => file.filename)
                .filter(file => file.startsWith('release-notes/') && file.endsWith('/releases.json'));

              console.log(`${releaseNotesFiles} release notes file(s) were updated.`);
            }

            const releaseNotesUpdated = releaseNotesFiles.length > 0;
            const releaseNotes = [];

            if (releaseNotesUpdated) {
              for (let path of releaseNotesFiles) {
                const { data: content } = await github.rest.repos.getContent({
                  owner,
                  repo,
                  path,
                  ref: currentSha,
                });
                let release;
                if (content.encoding === 'base64') {
                  release = Buffer.from(content.content, 'base64').toString();
                } else if (content.encoding === 'none') {
                  const response = await fetch(content.download_url);
                  release = await response.text();
                } else {
                  throw new Error(`Unexpected encoding for ${path}: ${content.encoding}`);
                }

                // Remove the releases array from the release notes
                // otherwise the JSON is too large to use as an output.
                const notes = JSON.parse(release);
                delete notes.releases;

                console.log(`Release notes for ${path}:\n${JSON.stringify(notes, null, 2)}`);

                releaseNotes.push(notes);
              }
            }

            core.setOutput('dotnet-core-updated-sha', updatedSha);
            core.setOutput('dotnet-release-notes', JSON.stringify(releaseNotes));
            core.setOutput('dotnet-releases-updated', releaseNotesUpdated);

  update-sha:
    name: update-sha
    needs: check-for-release
    if: ${{ needs.check-for-release.outputs.dotnet-core-updated-sha != '' }}

    concurrency:
      group: "update-sha"
      cancel-in-progress: false

    runs-on: [ ubuntu-latest ]

    steps:
      - name: "Update DOTNET_CORE_SHA"
      #  uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410 # v6.4.1
      #  with:
      #    github-token: ${{ secrets.ACCESS_TOKEN }}
      #    script: |
      #      const sha = '${{ needs.check-for-release.outputs.dotnet-core-updated-sha }}';
      #      await github.rest.actions.updateRepoVariable({
      #        owner: context.repo.owner,
      #        repo: context.repo.repo,
      #        name: 'DOTNET_CORE_SHA',
      #        value: sha,
      #      });
      #      core.notice(`dotnet/core SHA updated to ${sha}`);
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        run: |
          $sha = "${{ needs.check-for-release.outputs.dotnet-core-updated-sha }}"
          gh api --method PATCH "/repos/${{ github.repository }}/actions/variables/DOTNET_CORE_SHA" -f value='${{ needs.check-for-release.outputs.dotnet-core-updated-sha }}'
          Write-Output "::notice::dotnet/core SHA updated to ${sha}"

  create-dispatch:
    name: create-dispatch
    needs: check-for-release
    if: ${{ needs.check-for-release.outputs.dotnet-releases-updated == 'true' }}

    concurrency:
      group: "create-dispatch"
      cancel-in-progress: false

    permissions:
      contents: write

    runs-on: [ ubuntu-latest ]

    steps:
      - name: "Create repository dispatch for dotnet_release"
        uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410 # v6.4.1
        with:
          script: |
            const releaseNotes = JSON.parse(`${{ needs.check-for-release.outputs.dotnet-release-notes }}`);
            const isPreview = (release) => {
              switch (release['support-phase']) {
                case 'go-live':
                case 'preview':
                  return true;
                default:
                  return false;
              }
            };

            const branchesToDispatch = [];
            if (releaseNotes.some(release => !isPreview(release))) {
              branchesToDispatch.push('main');
            }
            if (releaseNotes.some(release => isPreview(release))) {
              branchesToDispatch.push('dotnet-vnext');
            }

            const event_type = 'dotnet_release';

            for (let branch of branchesToDispatch) {
              await github.rest.repos.createDispatchEvent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                event_type,
                client_payload: {
                  branch
                }
              });
              core.notice(`Dispatched ${event_type} for branch ${branch}`);
            }
