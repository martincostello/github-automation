name: nuget-packages-published
run-name: '${{ github.event.client_payload.repository }}@${{ github.event.client_payload.version }}'

on:
  repository_dispatch:
    types: [ nuget_packages_published ]

permissions: {}

jobs:

  wait-for-publish:
    runs-on: [ ubuntu-latest ]
    timeout-minutes: 30

    concurrency:
      group: '${{ github.workflow }}-${{ github.event.client_payload.repository }}-${{ github.event.client_payload.version }}'
      cancel-in-progress: false

    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      DOTNET_GENERATE_ASPNET_CERTIFICATE: false
      DOTNET_NOLOGO: true
      DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: 1
      FORCE_COLOR: 3
      NUGET_XMLDOC_MODE: skip
      TERM: xterm

    outputs:
      package-names: ${{ github.event.client_payload.packages }}
      package-version: ${{ github.event.client_payload.version }}
      published: ${{ steps.wait-for-publish.outputs.published }}
      repository: ${{ github.event.client_payload.repository }}

    permissions:
      contents: read

    steps:

      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          filter: 'tree:0'
          show-progress: false

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@3951f0dfe7a07e2313ec93c75700083e2005cbab # v4.3.0

      - name: Restore .NET tools
        shell: pwsh
        run: dotnet tool restore

      - name: Wait for NuGet packages to be published
        id: wait-for-publish
        shell: pwsh
        env:
          PACKAGE_NAMES: ${{ github.event.client_payload.packages }}
          PACKAGE_VERSION: ${{ github.event.client_payload.version }}
          PUBLISH_TIMEOUT: '00:25:00'
          REPOSITORY_NAME: ${{ github.event.client_payload.repository }}
        run: |
          $packageNames = ${env:PACKAGE_NAMES} -Split ','
          $packageVersion = ${env:PACKAGE_VERSION}.TrimStart('v')

          $packages = @()

          foreach ($packageName in $packageNames) {
            $packages += "${packageName}@${packageVersion}"
          }

          dotnet wait-for-package $packages --timeout ${env:PUBLISH_TIMEOUT}

          if ($LASTEXITCODE -ne 0) {
            Write-Output "::warning::Failed to wait for NuGet packages to be published and indexed."
            exit 0
          }

          "published=true" >> $env:GITHUB_OUTPUT

  notify-release:
    runs-on: [ ubuntu-latest ]
    needs: [wait-for-publish]
    if: needs.wait-for-publish.outputs.published == 'true'

    concurrency:
      group: '${{ github.workflow }}-${{ github.event.client_payload.repository }}-notify'
      cancel-in-progress: false

    steps:

      - name: Comment on issues and pull requests
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        env:
          REPOSITORY_NAME: ${{ github.event.client_payload.repository }}
          VERSION: ${{ github.event.client_payload.version }}
        with:
          github-token: ${{ secrets.COSTELLOBOT_TOKEN }}
          script: |
            const [ owner, repo ] = process.env.REPOSITORY_NAME.split('/');
            const version = process.env.VERSION;

            const { data: milestones } = await github.rest.issues.listMilestones({
              owner,
              repo,
              state: 'all',
              sort: 'completeness',
              direction: 'desc',
              per_page: 100,
            });

            core.debug(`Found ${milestones.length} milestones.`);

            const milestone =
              milestones.find((p) => p.title === version) ||
              milestones.find((p) => p.title === `v${version}`);

            if (!milestone) {
              console.log(`Milestone for version ${version} not found.`);
              return;
            }

            core.debug(`Found milestone ${milestone.title} (${milestone.number}).`);

            const issues = await github.paginate(github.rest.issues.listForRepo, {
              owner,
              repo,
              milestone: milestone.number,
              state: 'all',
            });

            core.debug(`Found ${issues.length} issues and pull requests for milestone.`);

            const ignoreAssociations = [
              'COLLABORATOR',
              'MEMBER',
              'OWNER',
            ];

            for (const issue of issues) {
              const issue_number = issue.number;
              if (issue.state === 'closed' && issue.state_reason === 'not_planned') {
                core.debug(`Ignoring issue #${issue_number} as it is not planned.`);
                continue;
              }

              const isPullRequest = !!issue.pull_request;

              if (isPullRequest && !issue.pull_request.merged_at) {
                core.debug(`Ignoring pull request #${issue_number} as it was not merged.`);
                continue;
              }

              const userLogin = issue.user.login;

              if (issue.user.type === 'Bot') {
                core.debug(`Ignoring issue #${issue_number} as it was created by ${userLogin}.`);
                continue;
              }

              if (ignoreAssociations.includes(issue.author_association)) {
                core.debug(`Ignoring issue #${issue_number} as it was created by ${userLogin} who has an association of ${issue.author_association}.`);
                continue;
              }

              const watermark = `\n<!-- ${owner}/${repo}/nuget-packages-published#${issue_number} -->`;
              let comment = null;

              try {
                const comments = await github.paginate(github.rest.issues.listComments, {
                  owner,
                  repo,
                  issue_number,
                });

                comment = comments.find((p) => p.body.includes(watermark));
              } catch (err) {
                core.warning(`Failed to list comments for issue #${issue_number}: ${err}`);
                continue;
              }

              if (comment) {
                core.debug(`Ignoring issue #${issue_number} as it has already been commented on.`);
                continue;
              }

              let body = isPullRequest ?
                `Thanks for your contribution @${userLogin} - the changes from this pull request have been published as part of version ${version} :package:, which is now available from NuGet.org :rocket:` :
                `Thanks for creating this issue @${userLogin} - the associated changes have been published as part of version ${version} :package:, which is now available from NuGet.org :rocket:`;

              console.log(`Adding comment to ${isPullRequest ? 'pull request' : 'issue'} #${issue_number}.`);
              core.debug(`#${issue_number}: ${body}`);

              body += watermark;

              try {
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number,
                  body,
                });
              } catch (err) {
                core.warning(`Failed to add comment to issue #${issue_number}: ${err}`);
              }
            }

  gpg-sign-release-assets:
    runs-on: [ ubuntu-latest ]

    concurrency:
      group: '${{ github.workflow }}-${{ github.event.client_payload.repository }}-gpg-sign'
      cancel-in-progress: false

    steps:

      - name: Get names of assets to sign
        id: find-assets
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        env:
          REPOSITORY_NAME: ${{ github.event.client_payload.repository }}
          VERSION: ${{ github.event.client_payload.version }}
        with:
          github-token: ${{ secrets.COSTELLOBOT_TOKEN }}
          result-encoding: string
          script: |
            const [ owner, repo ] = process.env.REPOSITORY_NAME.split('/');
            const version = process.env.VERSION;

            const releases = await github.paginate(github.rest.repos.listReleases, {
              owner,
              repo,
            });

            core.debug(`Found ${releases.length} releases.`);

            const release =
              releases.find((p) => p.tag_name === version) ||
              releases.find((p) => p.tag_name === `v${version}`);

            if (!release) {
              console.log(`Release for version ${version} not found.`);
              return;
            }

            const release_id = release.id;
            core.debug(`Found release ${release.tag_name} (${release_id}).`);

            const allAssets = await github.paginate(github.rest.repos.listReleaseAssets, {
              owner,
              repo,
              release_id,
            });

            core.debug(`Found ${allAssets.length} assets.`);

            const assets = allAssets.filter((p) => !p.name.endsWith('.sig'));
            const signatures = allAssets.filter((p) => p.name.endsWith('.sig'));
            const assetsToSign = assets.filter((p) => !signatures.some((q) => q.name === `${p.name}.sig`));

            if (assetsToSign.length === 0) {
              console.log('No assets to sign.');
              return;
            }

            core.debug(`Found ${assetsToSign.length} assets to sign.`);

            const fs = require('fs');
            const path = require('path');

            const assetsPath = path.join(process.env.GITHUB_WORKSPACE, 'artifacts');
            if (!fs.existsSync(assetsPath)) {
              fs.mkdirSync(assetsPath);
            }

            for (const asset of assetsToSign) {
              const response = await github.rest.repos.getReleaseAsset({
                owner,
                repo,
                asset_id: asset.id,
                headers: {
                  Accept: 'application/octet-stream',
                },
              });

              if (response.status !== 200 && response.status !== 302) {
                core.warning(`Failed to download asset ${asset.name}: ${response.status} ${response.statusText}`);
                continue;
              }

              const fileName = path.join(assetsPath, asset.name);
              fs.writeFileSync(fileName, Buffer.from(response.data));

              core.debug(`Downloaded asset ${asset.name} to ${fileName}.`);
            }

            core.setOutput('assets-to-sign', 'true');
            core.setOutput('release-id', release_id);
            return assetsPath;

      - name: Generate checksums
        if: steps.find-assets.outputs.assets-to-sign == 'true'
        env:
          ASSETS_PATH: ${{ steps.find-assets.outputs.result }}
        shell: bash
        run: |
          find "${ASSETS_PATH}" -type f -name '*' | while read -r fname; do
            echo "Generating checksum for ${fname}"
            sha256sum "${fname}" | awk '{print $1 "  " basename($2)}' >> "${ASSETS_PATH}/checksums.txt"
          done
          echo "Verifying checksums"
          sha256sum "${ASSETS_PATH}/checksums.txt" --check || exit 1

      - name: GPG sign assets
        if: steps.find-assets.outputs.assets-to-sign == 'true'
        env:
          ASSETS_PATH: ${{ steps.find-assets.outputs.result }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        shell: bash
        run: |
          curl -s "${GITHUB_API_URL}/users/${GITHUB_REPOSITORY_OWNER}/gpg_keys" | jq -r '.[].raw_key' | gpg --import
          gpg --list-keys --with-colons | awk -F: '/^fpr:/ { print $10 }' | while read -r key; do
            echo "${key}:6:" | gpg --import-ownertrust
          done
          echo "${GPG_PRIVATE_KEY}" | gpg --import --batch --yes --passphrase "${GPG_PASSPHRASE}"
          find "${ASSETS_PATH}" -type f -name '*' | while read -r fname; do
            echo "Signing ${fname}"
            gpg --batch --yes --pinentry-mode loopback --passphrase "${GPG_PASSPHRASE}" --detach-sig "${fname}"
            gpg --verify "${fname}.sig" "${fname}"
          done

      - name: Upload asset signatures
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        if: steps.find-assets.outputs.assets-to-sign == 'true'
        env:
          ASSETS_PATH: ${{ steps.find-assets.outputs.result }}
          RELEASE_ID: ${{ steps.find-assets.outputs.release-id }}
          REPOSITORY_NAME: ${{ github.event.client_payload.repository }}
        with:
          github-token: ${{ secrets.COSTELLOBOT_TOKEN }}
          script: |
            const [ owner, repo ] = process.env.REPOSITORY_NAME.split('/');
            const release_id = process.env.RELEASE_ID;
            const assetsPath = process.env.ASSETS_PATH;

            const fs = require('fs');
            const path = require('path');

            const fileNames = fs.readdirSync(assetsPath).filter((p) => p.endsWith('.sig'));

            if (fileNames.length === 0) {
              console.log('No asset signatures to upload.');
              return;
            }

            core.debug(`Found ${fileNames.length} asset signatures.`);

            fileNames.push('checksums.txt');

            for (const name of fileNames) {
              const data = fs.readFileSync(path.join(assetsPath, name));

              console.log(`Uploading ${name}.`);
              core.debug(`Uploading ${name} (${data.length} bytes).`);

              await github.rest.repos.uploadReleaseAsset({
                owner,
                repo,
                release_id,
                name,
                data,
              });
            }
