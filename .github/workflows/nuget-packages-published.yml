name: nuget-packages-published

on:
  repository_dispatch:
    types: [ nuget_packages_published ]

permissions: {}

jobs:

  wait-for-publish:
    runs-on: [ ubuntu-latest ]
    timeout-minutes: 30

    concurrency:
      group: ${{ github.workflow }}
      cancel-in-progress: false

    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      DOTNET_GENERATE_ASPNET_CERTIFICATE: false
      DOTNET_MULTILEVEL_LOOKUP: 0
      DOTNET_NOLOGO: true
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: 1
      FORCE_COLOR: 3
      NUGET_XMLDOC_MODE: skip
      TERM: xterm

    outputs:
      package-names: ${{ github.event.client_payload.packages }}
      package-version: ${{ github.event.client_payload.version }}
      published: ${{ steps.wait-for-publish.outputs.published }}
      repository: ${{ github.event.client_payload.repository }}

    permissions:
      contents: read

    steps:

      - name: Checkout code
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@4d6c8fcf3c8f7a60068d26b594648e99df24cee3 # v4.0.0

      - name: Get WaitForNuGetPackage version
        id: get-tool-version
        shell: pwsh
        run: |
          $toolVersion = (Get-Content "./.config/dotnet-tools.json" | Out-String | ConvertFrom-Json).tools.'MartinCostello.WaitForNuGetPackage'.version
          "tool-version=${toolVersion}" >> $env:GITHUB_OUTPUT

      - name: Wait for NuGet packages to be published
        id: wait-for-publish
        shell: pwsh
        env:
          PACKAGE_NAMES: ${{ github.event.client_payload.packages }}
          PACKAGE_VERSION: ${{ github.event.client_payload.version }}
          PUBLISH_TIMEOUT: '00:25:00'
          REPOSITORY_NAME: ${{ github.event.client_payload.repository }}
          TOOL_VERSION: ${{ steps.get-tool-version.outputs.tool-version }}
        run: |
          $packageNames = ${env:PACKAGE_NAMES} -Split ','
          $packageVersion = ${env:PACKAGE_VERSION}.TrimStart('v')

          $packages = @()

          foreach ($packageName in $packageNames) {
            $packages += "${packageName}@${packageVersion}"
          }

          dotnet tool install MartinCostello.WaitForNuGetPackage --global --version ${env:TOOL_VERSION}
          dotnet wait-for-package $packages --timeout ${env:PUBLISH_TIMEOUT}

          if ($LASTEXITCODE -ne 0) {
            Write-Output "::warning::Failed to wait for NuGet packages to be published and indexed."
            exit 0
          }

          "published=true" >> $env:GITHUB_OUTPUT
