name: 'Lint Workflow PowerShell'
description: 'Lints inline PowerShell scripts in GitHub Actions workflows using PSScriptAnalyzer.'
author: 'Martin Costello'

branding:
  icon: 'refresh-cw'
  color: 'blue'

inputs:
  powershell-yaml-version:
    description: 'The version of the powershell-yaml module to install.'
    required: false
  psscriptanalyzer-version:
    description: 'The version of the PSScriptAnalyzer module to install.'
    required: false

runs:
  using: 'composite'

  steps:

    - name: Install powershell-yaml
      shell: pwsh
      env:
        POWERSHELL_YAML_VERSION: ${{ inputs.powershell-yaml-version || '' }}
      run: |
        $additionalArgs = @()
        if (-Not [string]::IsNullOrWhiteSpace(${env:POWERSHELL_YAML_VERSION})) {
          $additionalArgs += "-MaximumVersion"
          $additionalArgs += ${env:POWERSHELL_YAML_VERSION}
        }
        Install-Module -Name powershell-yaml -Force $additionalArgs

    - name: Install PSScriptAnalyzer
      shell: pwsh
      env:
        PSSCRIPTANALYZER_VERSION: ${{ inputs.psscriptanalyzer-version || '' }}
      run: |
        $additionalArgs = @()
        if (-Not [string]::IsNullOrWhiteSpace(${env:PSSCRIPTANALYZER_VERSION})) {
          $additionalArgs += "-MaximumVersion"
          $additionalArgs += ${env:PSSCRIPTANALYZER_VERSION}
        }
        Install-Module -Name PSScriptAnalyzer -Force $additionalArgs

    - name: Lint workflow PowerShell steps
      shell: pwsh
      run: |
        $ErrorActionPreference = "Stop"

        $workflowsPath = (Join-Path ${env:GITHUB_WORKSPACE} ".github" "workflows")

        $workflows = @()
        $workflows += Get-ChildItem -Path ${env:GITHUB_WORKSPACE} -Filter action.yml -Recurse
        $workflows += Get-ChildItem -Path ${env:GITHUB_WORKSPACE} -Filter action.yaml -Recurse
        $workflows += Get-ChildItem -Path $workflowsPath -Filter *.yml
        $workflows += Get-ChildItem -Path $workflowsPath -Filter *.yaml

        $hasIssues = $false

        foreach ($file in $workflows) {
          $path = $file.FullName
          $content = Get-Content -Path $file.FullName -Raw

          $fileName = $path.Substring($PWD.Path.Length + 1).Replace('\', '/')
          $workflow = ConvertFrom-Yaml -Yaml $content

          Write-Output "Linting ${fileName}..."

          $errors = 0
          $warnings = 0

          foreach ($job in $workflow.jobs) {
            foreach ($step in $job.Values.steps) {
              if ($step.run -And $step.shell -eq 'pwsh') {
                $script = $step.run

                $firstLine = $script.Split("`n")[0]
                $offset    = (Select-String $path -Pattern ([regex]::Escape($firstLine))).LineNumber

                $issues = Invoke-ScriptAnalyzer -ScriptDefinition $script -IncludeDefaultRules -Severity @('Error','Warning')

                $errors   += $issues.Where({$_.Severity -eq 'Error' -or $_.Severity -eq 'ParseError'}).Count
                $warnings += $issues.Count - $errors

                foreach ($issue in $issues) {
                  $hasIssues = $true
                  $level = $issue.Severity -eq "Warning" ? "warning" : "error"
                  $line = $offset + $issue.Line - 1
                  Write-Output "::${level} file=${fileName},line=${line},title=PSScriptAnalyzer::${issue}"
                }
              }
            }
          }

          if ($workflow.runs) {
            foreach ($step in $workflow.runs.steps) {
              if ($step.run -And $step.shell -eq 'pwsh') {
                $script = $step.run

                $firstLine = $script.Split("`n")[0]
                $offset    = (Select-String $path -Pattern ([regex]::Escape($firstLine))).LineNumber

                $issues = Invoke-ScriptAnalyzer -ScriptDefinition $script -IncludeDefaultRules -Severity @('Error','Warning')

                $errors   += $issues.Where({$_.Severity -eq 'Error' -or $_.Severity -eq 'ParseError'}).Count
                $warnings += $issues.Count - $errors

                foreach ($issue in $issues) {
                  $hasIssues = $true
                  $level = $issue.Severity -eq "Warning" ? "warning" : "error"
                  $line = $offset + $issue.Line - 1
                  Write-Output "::${level} file=${fileName},line=${line},title=PSScriptAnalyzer::${issue}"
                }
              }
            }
          }
        }

        if ($hasIssues) {
          # https://github.com/actions/runner/issues/351
          $Host.SetShouldExit(1)
        }
